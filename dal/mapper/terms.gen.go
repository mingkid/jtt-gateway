// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package mapper

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/mingkid/jtt808-gateway/model"
)

func newTerm(db *gorm.DB, opts ...gen.DOOption) term {
	_term := term{}

	_term.termDo.UseDB(db, opts...)
	_term.termDo.UseModel(&model.Term{})

	tableName := _term.termDo.TableName()
	_term.ALL = field.NewAsterisk(tableName)
	_term.SN = field.NewString(tableName, "sn")
	_term.SIM = field.NewString(tableName, "sim")
	_term.Alive = field.NewField(tableName, "alive")

	_term.fillFieldMap()

	return _term
}

type term struct {
	termDo

	ALL   field.Asterisk
	SN    field.String
	SIM   field.String
	Alive field.Field

	fieldMap map[string]field.Expr
}

func (t term) Table(newTableName string) *term {
	t.termDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t term) As(alias string) *term {
	t.termDo.DO = *(t.termDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *term) updateTableName(table string) *term {
	t.ALL = field.NewAsterisk(table)
	t.SN = field.NewString(table, "sn")
	t.SIM = field.NewString(table, "sim")
	t.Alive = field.NewField(table, "alive")

	t.fillFieldMap()

	return t
}

func (t *term) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *term) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 3)
	t.fieldMap["sn"] = t.SN
	t.fieldMap["sim"] = t.SIM
	t.fieldMap["alive"] = t.Alive
}

func (t term) clone(db *gorm.DB) term {
	t.termDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t term) replaceDB(db *gorm.DB) term {
	t.termDo.ReplaceDB(db)
	return t
}

type termDo struct{ gen.DO }

type ITermDo interface {
	gen.SubQuery
	Debug() ITermDo
	WithContext(ctx context.Context) ITermDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ITermDo
	WriteDB() ITermDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ITermDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ITermDo
	Not(conds ...gen.Condition) ITermDo
	Or(conds ...gen.Condition) ITermDo
	Select(conds ...field.Expr) ITermDo
	Where(conds ...gen.Condition) ITermDo
	Order(conds ...field.Expr) ITermDo
	Distinct(cols ...field.Expr) ITermDo
	Omit(cols ...field.Expr) ITermDo
	Join(table schema.Tabler, on ...field.Expr) ITermDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ITermDo
	RightJoin(table schema.Tabler, on ...field.Expr) ITermDo
	Group(cols ...field.Expr) ITermDo
	Having(conds ...gen.Condition) ITermDo
	Limit(limit int) ITermDo
	Offset(offset int) ITermDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ITermDo
	Unscoped() ITermDo
	Create(values ...*model.Term) error
	CreateInBatches(values []*model.Term, batchSize int) error
	Save(values ...*model.Term) error
	First() (*model.Term, error)
	Take() (*model.Term, error)
	Last() (*model.Term, error)
	Find() ([]*model.Term, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Term, err error)
	FindInBatches(result *[]*model.Term, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Term) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ITermDo
	Assign(attrs ...field.AssignExpr) ITermDo
	Joins(fields ...field.RelationField) ITermDo
	Preload(fields ...field.RelationField) ITermDo
	FirstOrInit() (*model.Term, error)
	FirstOrCreate() (*model.Term, error)
	FindByPage(offset int, limit int) (result []*model.Term, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ITermDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (t termDo) Debug() ITermDo {
	return t.withDO(t.DO.Debug())
}

func (t termDo) WithContext(ctx context.Context) ITermDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t termDo) ReadDB() ITermDo {
	return t.Clauses(dbresolver.Read)
}

func (t termDo) WriteDB() ITermDo {
	return t.Clauses(dbresolver.Write)
}

func (t termDo) Session(config *gorm.Session) ITermDo {
	return t.withDO(t.DO.Session(config))
}

func (t termDo) Clauses(conds ...clause.Expression) ITermDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t termDo) Returning(value interface{}, columns ...string) ITermDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t termDo) Not(conds ...gen.Condition) ITermDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t termDo) Or(conds ...gen.Condition) ITermDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t termDo) Select(conds ...field.Expr) ITermDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t termDo) Where(conds ...gen.Condition) ITermDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t termDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) ITermDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t termDo) Order(conds ...field.Expr) ITermDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t termDo) Distinct(cols ...field.Expr) ITermDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t termDo) Omit(cols ...field.Expr) ITermDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t termDo) Join(table schema.Tabler, on ...field.Expr) ITermDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t termDo) LeftJoin(table schema.Tabler, on ...field.Expr) ITermDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t termDo) RightJoin(table schema.Tabler, on ...field.Expr) ITermDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t termDo) Group(cols ...field.Expr) ITermDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t termDo) Having(conds ...gen.Condition) ITermDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t termDo) Limit(limit int) ITermDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t termDo) Offset(offset int) ITermDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t termDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ITermDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t termDo) Unscoped() ITermDo {
	return t.withDO(t.DO.Unscoped())
}

func (t termDo) Create(values ...*model.Term) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t termDo) CreateInBatches(values []*model.Term, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t termDo) Save(values ...*model.Term) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t termDo) First() (*model.Term, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Term), nil
	}
}

func (t termDo) Take() (*model.Term, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Term), nil
	}
}

func (t termDo) Last() (*model.Term, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Term), nil
	}
}

func (t termDo) Find() ([]*model.Term, error) {
	result, err := t.DO.Find()
	return result.([]*model.Term), err
}

func (t termDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Term, err error) {
	buf := make([]*model.Term, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t termDo) FindInBatches(result *[]*model.Term, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t termDo) Attrs(attrs ...field.AssignExpr) ITermDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t termDo) Assign(attrs ...field.AssignExpr) ITermDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t termDo) Joins(fields ...field.RelationField) ITermDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t termDo) Preload(fields ...field.RelationField) ITermDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t termDo) FirstOrInit() (*model.Term, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Term), nil
	}
}

func (t termDo) FirstOrCreate() (*model.Term, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Term), nil
	}
}

func (t termDo) FindByPage(offset int, limit int) (result []*model.Term, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t termDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t termDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t termDo) Delete(models ...*model.Term) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *termDo) withDO(do gen.Dao) *termDo {
	t.DO = *do.(*gen.DO)
	return t
}
